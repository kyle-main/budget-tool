{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let TransactionService = /*#__PURE__*/(() => {\n  class TransactionService {\n    constructor(_http, snackBar) {\n      this._http = _http;\n      this.snackBar = snackBar;\n      this._url = 'http://localhost:5000/';\n    }\n\n    getHttpOptions(queryParams) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      let params = new HttpParams();\n\n      if (queryParams) {\n        Object.keys(queryParams).forEach(key => {\n          params = params.append(key, encodeURIComponent(queryParams[key]));\n        });\n      }\n\n      return {\n        headers,\n        params,\n        responseType: 'text'\n      };\n    }\n\n    saveTransactions(transactions) {\n      let URL = this._url + 'transactions/add'; // python transaction interface has\n      //   category as a string, so we have\n      //   to convert it here from Category.\n\n      let body = transactions.map(t => {\n        return Object.assign(Object.assign({}, t), {\n          category: t.category.value\n        });\n      });\n      return this._http.post(URL, body, this.getHttpOptions()).toPromise().then(data => {\n        this.openSuccessDialog();\n        return data;\n      }).catch(error => {\n        this.handleError(error);\n      });\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n\n      this.openErrorDialog(error.name);\n      return Promise.reject(error);\n    }\n\n    openErrorDialog(message) {\n      this.openSnackBar('error', message);\n    }\n\n    openSuccessDialog(message) {\n      this.openSnackBar('success', message ? message : undefined);\n    }\n\n    openSnackBar(status, message) {\n      const config = new MatSnackBarConfig();\n      let snack;\n      config.duration = 5000;\n\n      if (status === 'success') {\n        config.panelClass = ['snackbar-success'];\n        snack = 'Success';\n      } else {\n        config.panelClass = ['snackbar-failure'];\n        snack = message ? message : 'Unknown error ocurred.';\n      }\n\n      this.snackBar.open(snack, 'Dismiss', config);\n    }\n\n  }\n\n  TransactionService.ɵfac = function TransactionService_Factory(t) {\n    return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar));\n  };\n\n  TransactionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransactionService,\n    factory: TransactionService.ɵfac,\n    providedIn: 'root'\n  });\n  return TransactionService;\n})();","map":null,"metadata":{},"sourceType":"module"}